require "digest/md5"

class PdmAttachment < ActiveRecord::Base
	belongs_to :pdm_revisions
  
  acts_as_event :title => :filename,
                :url => Proc.new {|o| {:controller => 'pdm_attachments', :action => 'download', :id => o.id, :filename => o.filename}}

  cattr_accessor :storage_path
  @@storage_path = "#{RAILS_ROOT}/files"


  def file=(incoming_file)
    unless incoming_file.nil?
      @temp_file = incoming_file
      if @temp_file.size > 0
        self.filename = sanitize_filename(@temp_file.original_filename)
        self.disk_filename = PdmAttachment.disk_filename(filename)
        self.content_type = @temp_file.content_type.to_s.chomp
        if content_type.blank?
          self.content_type = Redmine::MimeType.of(filename)
        end
        self.filesize = @temp_file.size
      end
    end
  end
  
  def file
    nil
  end

  # Copies the temporary file to its final location
  # and computes its MD5 hash
  def before_save
    if @temp_file && (@temp_file.size > 0)
      logger.debug("saving '#{self.diskfile}'")
      #md5 = Digest::MD5.new
      File.open(diskfile, "wb") do |f| 
        buffer = ""
        while (buffer = @temp_file.read(8192))
          f.write(buffer)
          #md5.update(buffer)
        end
      end
      #self.digest = md5.hexdigest
    end
    # Don't save the content type if it's longer than the authorized length
    if self.content_type && self.content_type.length > 255
      self.content_type = nil
    end
  end

  # Returns file's location on disk
  def diskfile
    "#{@@storage_path}/#{self.disk_filename}"
  end
  
  def increment_download
    increment!(:downloads)
  end

  def image?
    self.filename =~ /\.(jpe?g|gif|png)$/i
  end
  
  def is_text?
    Redmine::MimeType.is_type?('text', filename)
  end
  
  def is_diff?
    self.filename =~ /\.(patch|diff)$/i
  end
  
  # Returns true if the file is readable
  def readable?
    File.readable?(diskfile)
  end

  def self.create_attachment(file)
    file = attachment['file']
    next unless file && file.size > 0
    
    a = Attachment.create(:file => file, :author_id => User.current.id)
    
  end
    
    
private
  def sanitize_filename(value)
    # get only the filename, not the whole path
    just_filename = value.gsub(/^.*(\\|\/)/, '')
    # NOTE: File.basename doesn't work right with Windows paths on Unix
    # INCORRECT: just_filename = File.basename(value.gsub('\\\\', '/')) 

    # Finally, replace all non alphanumeric, hyphens or periods with underscore
    @filename = just_filename.gsub(/[^\w\.\-]/,'_') 
  end
  
  # Returns an ASCII or hashed filename
  def self.disk_filename(filename)
    timestamp = DateTime.now.strftime("%y%m%d%H%M%S")
    ascii = ''
    if filename =~ %r{^[a-zA-Z0-9_\.\-]*$}
      ascii = filename
    else
      ascii = Digest::MD5.hexdigest(filename)
      # keep the extension if any
      ascii << $1 if filename =~ %r{(\.[a-zA-Z0-9]+)$}
    end
    while File.exist?(File.join(@@storage_path, "#{timestamp}_#{ascii}"))
      timestamp.succ!
    end
    "#{timestamp}_#{ascii}"
  end
end
